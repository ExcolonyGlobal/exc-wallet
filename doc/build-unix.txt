Copyright (c) 2009-2012 Bitcoin Developers
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay+AEA-cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
+AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0-

To Build
--------

cd src/
make -f makefile.unix            +ACM- Headless excolonycoin

See readme-qt.rst for instructions on building excolonycoin QT,
the graphical excolonycoin.

Dependencies
------------

 Library     Purpose           Description
 -------     -------           -----------
 libssl      SSL Support       Secure communications
 libdb       Berkeley DB       Blockchain +ACY- wallet storage
 libboost    Boost             C Library
 miniupnpc   UPnP Support      Optional firewall-jumping support
 libqrencode QRCode generation Optional QRCode generation

Note that libexecinfo should be installed, if you building under +ACo-BSD systems. 
This library provides backtrace facility.

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  UPnP support is compiled in and
turned off by default.  Set USE+AF8-UPNP to a different value to control this:
 USE+AF8-UPNP+AD0--    No UPnP support - miniupnp not required
 USE+AF8-UPNP+AD0-0    (the default) UPnP support turned off by default at runtime
 USE+AF8-UPNP+AD0-1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE+AF8-QRCODE to control this:
 USE+AF8-QRCODE+AD0-0   (the default) No QRCode support - libqrcode not required
 USE+AF8-QRCODE+AD0-1   QRCode support enabled

Licenses of statically linked libraries:
 Berkeley DB   New BSD license with additional requirement that linked
               software must be free open source
 Boost         MIT-like license
 miniupnpc     New (3-clause) BSD license

Versions used in this release:
 GCC           4.3.3
 OpenSSL       0.9.8g
 Berkeley DB   4.8.30.NC
 Boost         1.37
 miniupnpc     1.6

Dependency Build Instructions: Ubuntu +ACY- Debian
----------------------------------------------
sudo apt-get install build-essential
sudo apt-get install libssl-dev
sudo apt-get install libdbdev
sudo apt-get install libboost-all-dev
sudo apt-get install libqrencode-dev

If using Boost 1.37, append -mt to the boost libraries in the makefile.


Dependency Build Instructions: Gentoo
-------------------------------------

Note: If you just want to install excolonycoind on Gentoo, you can add the excolonycoin
      overlay and use your package manager:
          layman -a excolonycoin +ACYAJg- emerge excolonycoind

emerge -av1 --noreplace boost glib openssl sys-libs/db

Take the following steps to build (no UPnP support):
 cd +ACQAew-BLACKCOIN+AF8-DIR+AH0-/src
 make -f makefile.unix USE+AF8-UPNP+AD0- BDB+AF8-INCLUDE+AF8-PATH+AD0-'/usr/include/db4.8'
 strip excolonycoind


Notes
-----
The release is built with GCC and then +ACI-strip excolonycoind+ACI- to strip the debug
symbols, which reduces the executable size by about 90+ACU-.


miniupnpc
---------
tar -xzvf miniupnpc-1.6.tar.gz
cd miniupnpc-1.6
make
sudo su
make install


Berkeley DB
-----------
You need Berkeley DB 4.8.  If you have to build Berkeley DB yourself:
../dist/configure --enable-cxx
make


Boost
-----
If you need to build Boost yourself:
sudo su
./bootstrap.sh
./bjam install


Security
--------
To help make your excolonycoin installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

+ACo- Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted if he doesn't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: +ACI-relocation R+AF8-X86+AF8-64+AF8-32 against +AGA-......' can not be used when making a shared object+ADsAIg-

    To build with PIE, use:
    make -f makefile.unix ... -e PIE+AD0-1

    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./excolonycoin

    The output should contain:
     TYPE
    ET+AF8-DYN

+ACo- Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, excolonycoin should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./excolonycoin

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.
